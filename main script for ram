#!/bin/bash

# Strict mode with enhanced error handling
set -euo pipefail
set -o errtrace
trap 'handle_error $LINENO $BASH_COMMAND $?' ERR
trap 'cleanup_emergency $?' EXIT

# Configuration
LOG_FILE="/var/log/ramdisk.log"
CONFIG_FILE="/etc/ramdisk.conf"
MOUNT_POINT="/mnt/ramdisk"
OVERLAY_DIRS=("var" "tmp" "etc")
RAM_PERCENTAGE=70
MIN_RAM_SAFETY=1024
CONFIG_VERSION=1
MONITOR_PID=""

# Logging function
log() {
    local level="$1" message="$2"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $message" | tee -a "$LOG_FILE"
}

# Error handler
handle_error() {
    local lineno="$1" command="$2" exit_code="$3"
    log "ERROR" "Error in $command at line $lineno: Exit status $exit_code"
    exit $exit_code
}

# Load and validate configuration
load_config() {
    [ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE"
}

validate_config() {
    [[ "$RAM_PERCENTAGE" =~ ^[1-9][0-9]?$ ]] || { log "ERROR" "Invalid RAM_PERCENTAGE: $RAM_PERCENTAGE (1-99)"; return 1; }
    [[ "$MIN_RAM_SAFETY" =~ ^[1-9][0-9]{2,}$ ]] || { log "ERROR" "Invalid MIN_RAM_SAFETY: $MIN_RAM_SAFETY (>=100)"; return 1; }
    [ -d "$(dirname "$MOUNT_POINT")" ] || { log "ERROR" "Mount point parent directory missing"; return 1; }
    return 0
}

# Memory calculations
get_memory() { grep MemTotal /proc/meminfo | awk '{print $2 / 1024}'; }
get_available_memory() { grep MemAvailable /proc/meminfo | awk '{print $2 / 1024}'; }

calculate_safe_ram() {
    local total_mem=$(get_memory)
    local available_mem=$(get_available_memory)
    local max_possible=$((available_mem - MIN_RAM_SAFETY))
    [ $max_possible -lt 100 ] && { log "ERROR" "Insufficient memory"; return 1; }
    local desired=$((total_mem * RAM_PERCENTAGE / 100))
    local allocated=$(( desired < max_possible ? desired : max_possible ))
    [ $allocated -lt 100 ] && allocated=100
    echo $allocated
}

# Mount management
safe_mount() {
    local src=$1 dest=$2 type=$3 options=$4
    mountpoint -q "$dest" && return 0
    mkdir -p "$dest" || { log "ERROR" "Failed to create mount point $dest"; return 1; }
    mount -t "$type" -o "$options" "$src" "$dest" || { log "ERROR" "Mount failed"; return 1; }
    mountpoint -q "$dest" || { log "ERROR" "Mount verification failed"; return 1; }
    return 0
}

# Cleanup and emergency handling
cleanup_emergency() {
    log "INFO" "Cleaning up RAM disk"
    umount "$MOUNT_POINT" 2>/dev/null || true
    rm -rf "$MOUNT_POINT"
    log "INFO" "Cleanup complete"
}

# System resource monitoring
monitor_resources() {
    while true; do
        local available=$(get_available_memory)
        if [ $available -lt $((MIN_RAM_SAFETY * 2)) ]; then
            log "WARNING" "Low memory: ${available}MB available"
        fi
        sleep 60
    done &
    MONITOR_PID=$!
    trap "kill $MONITOR_PID 2>/dev/null" EXIT
}

# Signal handling
trap_signals() {
    trap 'log "WARNING" "SIGHUP received, reloading config"; load_config' HUP
    trap 'log "WARNING" "SIGTERM received, shutting down"; cleanup_emergency 0' TERM
    trap 'log "WARNING" "SIGINT received, shutting down"; cleanup_emergency 0' INT
}

# Dry run mode
dry_run() {
    echo "DRY RUN: Would execute:"
    echo "  - Mount RAM disk at $MOUNT_POINT"
    echo "  - Allocate $(calculate_safe_ram)MB RAM"
    exit 0
}

# Systemd notifications
notify_systemd() {
    local status="$1"
    [ -v NOTIFY_SOCKET ] && systemd-notify --status="$status"
}

# Performance metrics
log_performance() {
    local start=$1 operation="$2"
    local duration=$(( $(date +%s) - start ))
    log "METRIC" "$operation completed in ${duration}s"
    [ $duration -gt 5 ] && log "WARNING" "Slow operation: $operation took ${duration}s"
}

# Initialization
initialize_system() {
    log "INFO" "Initializing system"
    load_config || exit 1
    validate_config || exit 1
    trap_signals
    monitor_resources
    notify_systemd "RAM Disk setup completed"
}

initialize_system
